@using WebApplication9.Models;
@model Tuple<List<AccountViewModel>, List<AccountViewModel1>>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<head>
    <title>Geocoding service</title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <style>
        html, body {
            height: 100%;
            margin: 100px;
            margin-top: 30px;
            padding: 0;
        }
        h1{
            font-size: 100px;
        }
        #map {
            height: 500px;
        }

        #floating-panel {
            position: inherit;
            top: 10px;
            left: 25%;
            z-index: 5;
            background-color: #fff;
            padding: 5px;
            border: 1px solid #999;
            text-align: center;
            font-family: 'Roboto','sans-serif';
            line-height: 30px;
            padding-left: 10px;
        }
        #right-panel {
              font-family: 'Roboto','sans-serif';
              line-height: 30px;
              padding-left: 10px;
        }

        #right-panel select, #right-panel input {
          font-size: 15px;
        }

        #right-panel select {
          width: 100%;
        }

        #right-panel i {
          font-size: 12px;
        }
        #right-panel {
        height: 500px;
        float: right;
        width: 390px;
        overflow: auto;
      }

      #map {
        margin-right: 400px;
      }

      #floating-panel {
        background: #fff;
        padding: 5px;
        font-size: 14px;
        font-family: Arial;
        border: 1px solid #ccc;
        box-shadow: 0 2px 2px rgba(33, 33, 33, 0.4);
        display: none;
      }

      @@media print {
        #map {
          height: 500px;
          margin: 0;
        }

        #right-panel {
          float: none;
          width: auto;
        }
      }
        .controls {
            margin-top: 10px;
            border: 1px solid transparent;
            border-radius: 2px 0 0 2px;
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            height: 32px;
            outline: none;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }
        #pac-input {
            background-color: #fff;
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
            margin-left: 0;
            margin-bottom: 10px;
            padding: 0 11px 0 13px;
            text-overflow: ellipsis;
            width: 300px;
            }

            #pac-input:focus {
            border-color: #4d90fe;
            }

            .pac-container {
            font-family: Roboto;
            }

            #type-selector {
            color: #fff;
            background-color: #4d90fe;
            padding: 5px 11px 0px 11px;
            }

            #type-selector label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }

    </style>
    <style>
        #target {
            width: 345px;
        }
    </style>
</head>
<body>
    <h1>Das Client Finden</h1>
    <div id="right-panel"></div>
    <input id="pac-input" class="controls" type="text" placeholder="Prospective Client Search">
    <div id="map"></div>
    
    <script defer type="text/javascript">
        var allAccounts = @Html.Raw(Json.Encode(Model.Item2));
        var markers = [];
        var directionsDisplay;
        var directionsService;
        var currentLocation;
        var map;
        var infoWindow;

        function initMap() {
            directionsService = new google.maps.DirectionsService;
            directionsDisplay = new google.maps.DirectionsRenderer;
            map = new google.maps.Map(document.getElementById('map'), {
                zoom: 4,
                center: { lat: 39.8282, lng: -98.5795 }
            });
            directionsDisplay.setMap(map);
            directionsDisplay.setPanel(document.getElementById('right-panel'));

            var geocoder = new google.maps.Geocoder();
            for (var i = 0; i < 7; i++) {
                var location = allAccounts[i];
                var address = location.BillingStreet +" "+ location.BillingCity +", "+ location.BillingState +" "+ location.BillingPostalCode;
                geocoder.geocode({ 'address': address }, function (results, status) {
                    if (status === google.maps.GeocoderStatus.OK) {
                        var marker = new google.maps.Marker({
                            map: map,
                            position: results[0].geometry.location
                        });
                        marker.addListener('click', function() {
                            calculateAndDisplayRoute(directionsService, directionsDisplay, this.getPosition(), currentLocation);
                            map.setCenter(marker.getPosition());
                        });
                        markers.push(marker);
                    } else {
                        alert('Geocode was not successful for the following reason: ' + status + 'initMap');
                    }
                });

            }
            var input = document.getElementById('pac-input');
                var searchBox = new google.maps.places.SearchBox(input);
                map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

                map.addListener('bounds_changed', function() {
                    searchBox.setBounds(map.getBounds());
                });
                var searchMarkers = [];
                
                searchBox.addListener('places_changed', function() {
                    var places = searchBox.getPlaces();
                    if (places.length == 0) {
                        return;
                    }

                    searchMarkers.forEach(function(marker) {
                        marker.setMap(null);
                    });
                    searchMarkers = [];

                    var bounds = new google.maps.LatLngBounds();
                    places.forEach(function(place) {
                        var icon = 'https://mt.google.com/vt/icon?psize=20&font=fonts/Roboto-Regular.ttf&color=ff330000&name=icons/spotlight/spotlight-waypoint-blue.png&ax=44&ay=48&scale=1&text=%E2%80%A2';
                        var searchMarker = new google.maps.Marker({
                            map: map,
                            icon: icon,
                            title: place.name,
                            position: place.geometry.location
                        });
                        searchMarker.addListener('click', function() {
                            calculateAndDisplayRoute(directionsService, directionsDisplay, this.getPosition(), currentLocation);
                            map.setCenter(searchMarker.getPosition());
                        });
                        searchMarkers.push(searchMarker);

                        if (place.geometry.viewport) {
                            bounds.union(place.geometry.viewport);
                        } else {
                            bounds.extend(place.geometry.location);
                        }
                    });
                    map.fitBounds(bounds);
                });
        }
        function calculateAndDisplayRoute(directionsService, directionsDisplay, Destination, Origin) {
            directionsService.route({
                origin: Origin,
                destination: Destination,
                travelMode: google.maps.TravelMode.DRIVING
            }, function(response, status) {
                if (status === google.maps.DirectionsStatus.OK) {
                    directionsDisplay.setDirections(response);
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
        }
        function geocodeAddress(Location) {
            map.setZoom(13);
            var geocoder = new google.maps.Geocoder();
            for (var i = 0; i < markers.length; i++) {
                markers[i].setMap(map);
            }
            var address1 = Location;
            currentLocation = Location;
            geocoder.geocode({ 'address': address1 }, function (results, status) {
                if (status === google.maps.GeocoderStatus.OK) {
                    map.panTo(results[0].geometry.location);
                    var marker = new google.maps.Marker({
                        map: map,
                        animation: google.maps.Animation.DROP,
                        position: results[0].geometry.location
                    });
                } else {
                    alert('Geocode was not successful for the following reason: ' + status);
                }
            });
        }
    </script>
    <script 
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBouzJTuxa9dCflnWWrrG8U1ti6Q96UOBc&signed_in=true&callback=initMap">
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBouzJTuxa9dCflnWWrrG8U1ti6Q96UOBc&callback=initMap&signed_in=true&libraries=places,visualization" ></script>
    <h2>Accounts</h2>
    @using (Html.BeginForm())
    {
        <p>
            @Html.TextBox("SearchString")
            <input type="submit" name="SearchString" value="Search" />
        </p>
    }
    <table class="table">
        <tr>
            <th>
                Name
            </th>
            <th>
                Billing Street
            </th>
            <th>
                Billing City
            </th>
            <th>
                Billing State
            </th>
            <th>
                Billing Postal Code
            </th>
            <th>
                <p>Select</p>
            </th>
            @*<th></th>*@
        </tr>
        @foreach (var item in Model.Item1)
        {
            <tr>
                <td>
                    @item.Name
                </td>
                <td>
                    @item.BillingStreet
                </td>
                <td>
                    @item.BillingCity
                </td>
                <td>
                    @item.BillingState
                </td>
                <td>
                    @item.BillingPostalCode
                </td>
                <td>
                    @Html.Raw("<input id=\"Select\" type=\"submit\" value=\"Select\" name=\"item.BillingCity\" onclick=\"geocodeAddress('" + item.BillingStreet + " " + item.BillingCity + ", " + item.BillingState + " " + item.BillingPostalCode + "')\" />")
                </td>
            </tr>
        }
    </table>
</body>